{"version":3,"sources":["api.ts","util.ts","App.tsx","serviceWorker.ts","index.tsx","App.module.scss"],"names":["baseUrl","process","types","params","a","query","qs","stringify","fetch","headers","Accept","then","r","json","assertIsDefined","value","msg","undefined","Error","defaultParams","state","type","sort","limit","initialState","events","next","error","progress","eventsReducer","action","isPagination","payload","pagination_last_id","oldEvents","concat","pagination","next_page","App","useReducer","data","dispatch","dataSource","useMemo","map","event","key","id","name","date","start_datetime","fetchEvents","useCallback","loadEvents","error_type","catch","onChangeType","onRetry","onLoadMore","replace","parse","autoFocus","data-testid","disabled","onChange","placeholder","className","classes","t","Option","status","subTitle","extra","onClick","columns","title","dataIndex","render","format","parseISO","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","module","exports"],"mappings":"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","file":"static/js/main.c8f4184e.chunk.js","sourcesContent":["import qs from \"qs\";\n\nexport type Params = {\n  pagination_last_id?: string;\n  state: \"upcoming\";\n  type: string;\n  sort: \"display_order,start_datetime,id\";\n  limit: number;\n  /* some unused params missing */\n};\n\nexport type Event = {\n  id: string;\n  name: string;\n  start_datetime: string;\n  /* some unused properties missing */\n};\n\nexport type Response = {\n  events: Event[];\n  pagination: { next_page: string | null };\n  error_type?: string;\n};\n\nconst baseUrl = process.env.REACT_APP_API_BASE_URL;\n\nexport const types = [\n  \"american_football_match\",\n  \"american_football_outright\",\n  \"baseball_match\",\n  \"baseball_outright\",\n  \"basketball_esports_match\",\n  \"basketball_match\",\n  \"boxing_match\",\n  \"call_of_duty_match\",\n  \"cricket_match\",\n  \"cricket_outright\",\n  \"csgo_match\",\n  \"current_affairs\",\n  \"cycling\",\n  \"darts_match\",\n  \"darts_outright\",\n  \"dota_2_match\",\n  \"football_esports_match\",\n  \"football_match\",\n  \"football_outright\",\n  \"golf_match\",\n  \"golf_outright\",\n  \"greyhound_racing_race\",\n  \"handball_match\",\n  \"horse_racing_race\",\n  \"ice_hockey_match\",\n  \"league_of_legends_match\",\n  \"mma_match\",\n  \"motorsports_race\",\n  \"motorsports_outright\",\n  \"politics\",\n  \"politics_outright\",\n  \"rowing\",\n  \"rugby_league_match\",\n  \"rugby_league_outright\",\n  \"rugby_union_match\",\n  \"rugby_union_outright\",\n  \"snooker_match\",\n  \"snooker_outright\",\n  \"table_tennis_match\",\n  \"table_tennis_outright\",\n  \"tennis_match\",\n  \"tennis_outright\",\n  \"volleyball_match\",\n  \"generic\",\n  \"top_level_event\",\n  \"tv_entertainment\",\n];\n\nexport async function loadEvents(params: Params): Promise<Response> {\n  const query = qs.stringify(params);\n  return fetch(`${baseUrl}/v3/events/?${query}`, {\n    headers: {\n      Accept: \"application/json\",\n    },\n  }).then((r) => r.json());\n}\n","/**\n * see [Assertion Functions](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions)\n */\nexport function assertIsDefined<T>(\n  value: T,\n  msg?: string\n): asserts value is NonNullable<T> {\n  if (value === undefined || value === null) {\n    throw new Error(\n      msg || `Expected \"value\" to be defined, but received \"${value}\"`\n    );\n  }\n}\nexport function assert(condition: any, msg?: string): asserts condition {\n  if (!condition) {\n    throw new Error(msg || \"Expected condition to be truthy\");\n  }\n}\n","import React, { useReducer, useCallback, useMemo } from \"react\";\nimport { format, parseISO } from \"date-fns\";\nimport { Result, Button, Row, Table, Select } from \"antd\";\nimport qs from \"qs\";\n\nimport {\n  Params,\n  Response as EventsResponse,\n  Event,\n  types,\n  loadEvents,\n} from \"./api\";\nimport { assertIsDefined } from \"./util\";\n\nimport * as classes from \"./App.module.scss\";\n\ntype Action =\n  | { type: \"started\"; payload: Params }\n  | {\n      type: \"success\";\n      payload: EventsResponse;\n    }\n  | { type: \"error\"; payload: Error | EventsResponse; error: true };\n\ntype State = {\n  events: Array<Event> | null;\n  next: string | null;\n  params: Params | null;\n  error: Error | EventsResponse | null;\n  progress: boolean;\n};\n\nconst defaultParams: Params = {\n  state: \"upcoming\",\n  type: types[0],\n  sort: \"display_order,start_datetime,id\",\n  limit: 20,\n};\n\nconst initialState: State = {\n  events: null,\n  next: null,\n  params: null,\n  error: null,\n  progress: false,\n};\n\nfunction eventsReducer(state: State, action: Action): State {\n  let isPagination;\n\n  switch (action.type) {\n    case \"started\":\n      isPagination = !!action.payload.pagination_last_id;\n      return {\n        ...state,\n        events: isPagination ? state.events : [],\n        next: isPagination ? state.next : null,\n        params: action.payload,\n        progress: true,\n      };\n    case \"success\":\n      assertIsDefined(state.params);\n\n      isPagination = !!state.params.pagination_last_id;\n      const oldEvents = isPagination ? state.events : [];\n      assertIsDefined(oldEvents);\n\n      return {\n        ...state,\n        params: state.params,\n        progress: false,\n        events: oldEvents.concat(action.payload.events),\n        next: action.payload.pagination.next_page,\n        error: null,\n      };\n    case \"error\":\n      assertIsDefined(state.params);\n      return {\n        ...state,\n        params: state.params,\n        progress: false,\n        error: action.payload,\n      };\n  }\n}\n\nfunction App() {\n  const [data, dispatch] = useReducer(eventsReducer, initialState);\n\n  const dataSource = useMemo(() => {\n    if (!data.events) return [];\n\n    return data.events.map((event) => ({\n      key: event.id,\n      name: event.name,\n      date: event.start_datetime,\n    }));\n  }, [data.events]);\n\n  const fetchEvents = useCallback(\n    (params: Params) => {\n      dispatch({ type: \"started\", payload: params });\n\n      loadEvents(params)\n        .then((payload) => {\n          if (\"error_type\" in payload) {\n            throw new Error(payload.error_type);\n          } else {\n            dispatch({ type: \"success\", payload });\n          }\n        })\n        .catch((error) => {\n          dispatch({ type: \"error\", payload: error, error: true });\n        });\n    },\n    [dispatch]\n  );\n\n  const onChangeType = useCallback(\n    (type: string) => fetchEvents({ ...defaultParams, type }),\n    [fetchEvents]\n  );\n  const onRetry = useCallback(() => {\n    assertIsDefined(data.params);\n    fetchEvents(data.params);\n  }, [data.params, fetchEvents]);\n  const onLoadMore = useCallback(() => {\n    assertIsDefined(data.next);\n    const query = data.next.replace(\"?\", \"\");\n    const params = (qs.parse(query) as unknown) as Params;\n    fetchEvents(params);\n  }, [data.next, fetchEvents]);\n\n  return (\n    <Row>\n      <Select\n        autoFocus\n        data-testid=\"type-select\"\n        disabled={data.progress}\n        value={data.params?.type}\n        onChange={onChangeType}\n        placeholder=\"Plese select event type\"\n        className={classes.fullWidth}\n      >\n        {types.map((t) => (\n          <Select.Option key={t} value={t}>\n            {t}\n          </Select.Option>\n        ))}\n      </Select>\n      {data.error !== null && (\n        <Result\n          status=\"error\"\n          subTitle=\"Sorry, failed to load event.\"\n          className={classes.fullWidth}\n          extra={\n            <Button\n              data-testid=\"retry\"\n              disabled={data.progress}\n              type=\"primary\"\n              onClick={onRetry}\n            >\n              Retry\n            </Button>\n          }\n        />\n      )}\n      {data.error === null && (\n        <>\n          <Table\n            className={classes.fullWidth}\n            dataSource={dataSource}\n            pagination={false}\n            columns={[\n              {\n                title: \"Event name\",\n                dataIndex: \"name\",\n              },\n              {\n                title: \"Start Date\",\n                dataIndex: \"date\",\n                render: (date) => format(parseISO(date), \"PPPp\"),\n              },\n            ]}\n          />\n          {!!data.next && (\n            <Button\n              data-testid=\"load-more\"\n              disabled={data.progress}\n              type=\"primary\"\n              onClick={onLoadMore}\n              className={classes.loadMore}\n            >\n              Load more\n            </Button>\n          )}\n        </>\n      )}\n    </Row>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fullWidth\":\"App_fullWidth__2qOYh\",\"loadMore\":\"App_loadMore__2ed75\"};"],"sourceRoot":""}